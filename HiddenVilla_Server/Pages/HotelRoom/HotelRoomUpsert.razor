@page "/hotel-room/create"
@page "/hotel-room/edit/{Id:int}"
@using Models
@using Business.Repository.IRepository
@using System.IO
@using HiddenVilla_Server.Service
@inject IHotelRoomRepository HotelRoomRepository
@inject IHotelImageRepository HotelImagesRepository
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject IFileUpload FileUpload
@attribute [Authorize]


<div class="row mt-2 mb-5">
    <h3 class="card-title text-info mb-3 ml-3">@Title Hotel Room</h3>
    <div class="col-md-12">
        <div class="card">
            <div class="card-body">
                <EditForm Model="HotelRoomModel" OnValidSubmit="HandleHotelRoomUpsert">
                    <DataAnnotationsValidator />
                    @*<ValidationSummary/>*@
                    <div class="form-group">
                        <label>Name</label>
                        <InputText @bind-Value="HotelRoomModel.Name" class="form-control"></InputText>
                        <ValidationMessage For="()=>HotelRoomModel.Name"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label>Occupancy</label>
                        <InputNumber @bind-Value="HotelRoomModel.Occupancy" class="form-control"></InputNumber>
                        <ValidationMessage For="()=>HotelRoomModel.Occupancy"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label>Rate</label>
                        <InputNumber @bind-Value="HotelRoomModel.RegularRate" class="form-control"></InputNumber>
                        <ValidationMessage For="()=>HotelRoomModel.RegularRate"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label>Sq ft.</label>
                        <InputText @bind-Value="HotelRoomModel.SqFt" class="form-control"></InputText>
                    </div>
                    <div class="form-group" style="height:250px;">
                        <label>Details</label>
                        @*<InputTextArea @bind-Value="HotelRoomModel.Details" class="form-control"></InputTextArea>*@
                        <BlazoredTextEditor @ref="@QuillHtml" Placeholder="Please enter room details">
                            <ToolbarContent>
                                <select class="ql-header">
                                    <option selected=""></option>
                                    <option value="1"></option>
                                    <option value="2"></option>
                                    <option value="3"></option>
                                    <option value="4"></option>
                                    <option value="5"></option>
                                </select>
                                <span class="ql-formats">
                                    <button class="ql-bold"></button>
                                    <button class="ql-italic"></button>
                                    <button class="ql-underline"></button>
                                    <button class="ql-strike"></button>
                                </span>
                                <span class="ql-formats">
                                    <select class="ql-color"></select>
                                    <select class="ql-background"></select>
                                </span>
                                <span class="ql-formats">
                                    <button class="ql-list" value="ordered"></button>
                                    <button class="ql-list" value="bullet"></button>
                                </span>
                                <span class="ql-formats">
                                    <button class="ql-link"></button>
                                </span>
                            </ToolbarContent>
                            <EditorContent>
                            </EditorContent>
                        </BlazoredTextEditor>

                    </div>
                    <div class="form-group" style="padding-top: 70px;">
                        <InputFile OnChange="HandleImageUpload" multiple></InputFile>
                        <div class="row">
                            @if (HasImageUploadProcessStarted)
                            {
                                <div class="col-md-12">
                                    <span><i class="fa fa-spin fa-spinner"></i> Please wait... Images are uploading.</span>
                                </div>
                            }
                            @if (HotelRoomModel.ImageUrls != null && HotelRoomModel.ImageUrls.Count > 0)
                            {
                                int photoCounter = 1;
                                foreach (var roomImage in HotelRoomModel.ImageUrls)
                                {
                                    <div class="col-md-2 mt-3">
                                        <div class="room-image" style="background: url('@roomImage') 50% 50%; ">
                                            <span class="room-image-title">@photoCounter</span>
                                        </div>
                                        <button type="button" @onclick="()=>DeletePhoto(roomImage)" class="btn btn-outline-danger btn-block mt-4">Delete</button>
                                    </div>

                                    photoCounter++;
                                }
                            }
                        </div>
                    </div>
                    <div class="form-group">
                        <button class="btn btn-primary">@Title Room </button>
                        <NavLink href="hotel-room" class="btn btn-secondary">Back to Index</NavLink>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public int? Id { get; set; }

    private HotelRoomDTO HotelRoomModel { get; set; } = new HotelRoomDTO();
    private string Title { get; set; } = "Create";
    private HotelRoomImageDTO RoomImage { get; set; } = new HotelRoomImageDTO();

    //MyDelete
    private List<string> updateDeleteList { get; set; } = new List<string>();
    public BlazoredTextEditor QuillHtml { get; set; } = new BlazoredTextEditor();
    private bool HasImageUploadProcessStarted { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        if (Id != null)
        {
            //updating
            Title = "Update";
            HotelRoomModel = await HotelRoomRepository.GetHotelRoom(Id.Value);
            if (HotelRoomModel?.HotelRoomImages != null)
            {
                //HotelRoomImages gets the data from the database during GetHotelRoom function call
                HotelRoomModel.ImageUrls = HotelRoomModel.HotelRoomImages.Select(u => u.RoomImageUrl).ToList();
            }

        }
        else
        {
            //create
            HotelRoomModel = new HotelRoomDTO(); // not needed it appears
        }
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;
        bool loading = true;
        while (loading)
        {
            try
            {
                if (!string.IsNullOrEmpty(HotelRoomModel.Details))
                {
                    await this.QuillHtml.LoadHTMLContent(HotelRoomModel.Details);
                }
                loading = false;
            }
            catch
            {
                await Task.Delay(10);
                loading = true;
            }
        }


        //return base.OnAfterRenderAsync(firstRender);
    }

    private async Task HandleHotelRoomUpsert()
    {
        try
        {
            Console.WriteLine(HotelRoomModel.Id); // erase this later
            var roomDetailsByName = await HotelRoomRepository.IsRoomUnique(HotelRoomModel.Name, HotelRoomModel.Id);
            if (roomDetailsByName != null)
            {
                //there is duplicate room show error
                await JsRuntime.ToastrError("Room name already exists.");
                return;
            }

            if (HotelRoomModel.Id != 0 && Title == "Update")
            {
                HotelRoomModel.Details = await QuillHtml.GetHTML();
                //update
                var updateRoomResult = await HotelRoomRepository.UpdateHotelRoom(HotelRoomModel.Id, HotelRoomModel);
                if ((HotelRoomModel.ImageUrls != null && HotelRoomModel.ImageUrls.Any()) || (updateDeleteList != null && updateDeleteList.Any()))
                {
                    //update delete
                    foreach (var imageName in updateDeleteList)
                    {
                        FileUpload.DeleteFile(imageName);
                        await HotelImagesRepository.DeleteHotelRoomByImageUrl(imageName);

                    }

                    //add images only if new
                    await AddHotelRoomImage(updateRoomResult);
                }
                await JsRuntime.ToastrSuccess("Hotel room updated successfully");
            }
            else
            {

                //create
                HotelRoomModel.Details = await QuillHtml.GetHTML();
                var createdResult = await HotelRoomRepository.CreateHotelRoom(HotelRoomModel);
                await AddHotelRoomImage(createdResult);

                await JsRuntime.ToastrSuccess("Hotel room created successfully");

            }
        }
        catch (Exception ex)
        {

        }

        NavigationManager.NavigateTo("hotel-room");
    }



    //Checks if files are correct format, makes file path and uploads to server,
    //then adds list of file paths to DTO imageUrls
    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        HasImageUploadProcessStarted = true;
        try
        {
            var images = new List<string>();
            if (e.GetMultipleFiles().Count > 0)
            {
                foreach (var file in e.GetMultipleFiles())
                {
                    FileInfo fileInfo = new FileInfo(file.Name);
                    if (fileInfo.Extension.ToLower() == ".jpg" || fileInfo.Extension.ToLower() == ".png" || fileInfo.Extension.ToLower() == ".jpeg")
                    {
                        //success
                        var uploadedImagePath = await FileUpload.UploadFile(file);
                        images.Add(uploadedImagePath);
                    }
                    else
                    {
                        //error
                        await JsRuntime.ToastrError("Please select .jpg/.jpeg/.png file only");
                        return;
                    }
                }
                if (images.Any())
                {
                    if (HotelRoomModel.ImageUrls != null && HotelRoomModel.ImageUrls.Any())
                    {
                        //if already has image urls
                        HotelRoomModel.ImageUrls.AddRange(images);
                    }
                    else
                    {
                        //if creating or empty edit (no image urls)
                        HotelRoomModel.ImageUrls = new List<string>();
                        HotelRoomModel.ImageUrls.AddRange(images);
                    }
                }
                else
                {
                    await JsRuntime.ToastrError("Image uploading failed");
                    return;
                }
            }
            HasImageUploadProcessStarted = false;
        }
        catch (Exception ex)
        {
            await JsRuntime.ToastrError(ex.Message);
        }
    }

    //After hotelRoom is written to the database it makes a seperate entry for each image in the image Db
    private async Task AddHotelRoomImage(HotelRoomDTO roomDetails)
    {
        if (HotelRoomModel.ImageUrls.Count() > 0) // added this
        {
            foreach (var imageUrl in HotelRoomModel.ImageUrls)
            {

                if (HotelRoomModel.HotelRoomImages == null || HotelRoomModel.HotelRoomImages.Where(x => x.RoomImageUrl == imageUrl).Count() == 0)
                {

                    RoomImage = new HotelRoomImageDTO()
                    {
                        RoomId = roomDetails.Id,
                        RoomImageUrl = imageUrl
                    };
                    await HotelImagesRepository.CreateHotelRoomImage(RoomImage);
                }
            }
        }
    }

    private async Task DeletePhoto(string imageUrl)
    {
        try
        {
            var imageIndex = HotelRoomModel.ImageUrls.FindIndex(x => x == imageUrl);
            var imageName = imageUrl.Replace($"{NavigationManager.BaseUri}RoomImages/", "");
            if (HotelRoomModel.Id == 0 && Title == "create")
            {
                //adjust list, go to folder and erase image, adjust view/remove button
                var result = FileUpload.DeleteFile(imageName);
            }
            //update
            else
            {
                updateDeleteList ??= new List<string>(); //incase of null error
                updateDeleteList.Add(imageName);

            }


            HotelRoomModel.ImageUrls.RemoveAt(imageIndex);
        }
        catch (Exception ex)
        {
            await JsRuntime.ToastrError(ex.Message);
        }
    }

}
