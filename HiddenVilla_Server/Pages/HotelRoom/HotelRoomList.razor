@page "/hotel-room"
@using Models
@using Business.Repository.IRepository
@inject IHotelRoomRepository HotelRoomRepository
@inject IJSRuntime JsRuntime

<div class="row mt-4">
    <div class="col-8">
        <h4 class="card-title text-info">Hotel Rooms</h4>
    </div>
    <div class="col-3 offset-1">
        <NavLink href="hotel-room/create" class="btn btn-info form-control">Add New Room</NavLink>
    </div>
</div>

<div class="row mt-4">
    <div class="col-12">
        <table class="table table-bordered table-hover">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Occupancy</th>
                    <th>Rate</th>
                    <th>Sqft</th>
                    <th>

                    </th>
                </tr>
            </thead>
            <tbody>
                @if (HotelRooms.Any())
            {
                    foreach(var room in HotelRooms)
                {
                <tr>
                    <td>@room.Name</td>
                    <td>@room.Occupancy</td>
                    <td>@room.RegularRate.ToString("c")</td>
                    <td>@room.SqFt</td>
                    <td>
                        <NavLink href="@($"hotel-room/edit/{room.Id}")" class="btn btn-primary">Edit</NavLink>
                        <button class="btn btn-danger" @onclick="()=>handleDelete(room.Id)">Delete</button>
                        
                    </td>
                </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="5">No records found</td>
                </tr>
            }
            </tbody>
        </table>
    </div>
</div>

<DeleteConfirmation></DeleteConfirmation>

@code {
    private IEnumerable<HotelRoomDTO> HotelRooms { get; set; } = new List<HotelRoomDTO>();
    private int? DeleteRoomId { get; set; } = null;

    protected override async Task OnInitializedAsync()
    {
        HotelRooms = await HotelRoomRepository.GetAllHotelRooms();
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await JsRuntime.InvokeVoidAsync("HideDeleteConfirmationModel");
    }

    private async Task handleDelete(int roomId)
    {
        DeleteRoomId = roomId;
        await JsRuntime.InvokeVoidAsync("ShowDeleteConfirmationModel");
    }

    public async Task ConfirmDelete_Click(bool isConfirmed)
    {
        if(isConfirmed && DeleteRoomId != null)
        {
            await HotelRoomRepository.DeleteHotelRoom(DeleteRoomId.Value);
            await JsRuntime.ToastrSuccess("Hotel Room Deleted Successfully");
            HotelRooms = await HotelRoomRepository.GetAllHotelRooms();
        }

        await JsRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
    }
}
